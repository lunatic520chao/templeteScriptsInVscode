{
	// Place your snippets for csharp here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"set get generater simple style": {
		"prefix": "sgms",
		"body": [
			"$1 { get; set;} ",
		],
		"description": "generate set and get method for "
	},
	"set get generater": {
		"prefix": "sgm",
		"body": [
			"$1",
			"{",
			"    get{",
			"         return this._${2:attr};",
			"    }",
			"    set{",
			"        this._${2:attr} = value;",
			"    }",
			"}",
			""
		],
		"description": "generate set and get method for "
	},
	"method generater void": {
		"prefix": "mgv",
		"body": [
			"($1)",
			"{",
			"    $2",
			"}",
			""
		],
		"description": "generate void method entity "
	},
	
	"method generater return": {
		"prefix": "mgr",
		"body": [
			"($1)",
			"{",
			"    $2;",
			"    return $3;",
			"}",
			""
		],
		"description": "generate return method entity "
	},
	"lambda expression": {
		"prefix": "lambda",
		"body": [
			"($1)=>{ $2; }",
			""
		],
		"description": "generate lambda method entity "
	},
	"using Universe list": {
		"prefix": "usin",
		"body": [
			"using System;",
			"using System.Collections.Generic;",
			"using System.Linq;",
			"using System.Text;",
			""
		],
		"description": "generate import entity"
	},
	"new Universe class": {
		"prefix": "class-new",
		"body": [
			"using System;",
			"using System.Collections.Generic;",
			"using System.Linq;",
			"using System.Text;",
			"",
			"namespace $1",
			"{",
			"\tclass $2",
			"\t{",
			"\t\t#region attributes",
			"\t\t$3",
			"\t\t#endregion",
			"",
			"\t\t#region methods",
			"\t\t",
			"\t\t#endregion",
			"\t\t#region class methods",
			"",
			"\t\t#endregion",
			"\t}",
			"}"
		],
		"description": "generate new class entity"
	},
	"print system console": {
		"prefix": "prs",
		"body": [
			"Console.Write($1);"
		],
		"description": "generate console write"
	},
	"print self console": {
		"prefix": "prlcg",
		"body": [
			"Caller.Print(\"$1\");"
		],
		"description": "generate console write"
	},
	"print comment": {
		"prefix": "comm",
		"body": [
			"//",
			"// Summary:",
			"//     $1.",
			"//     generic parameter count and argument types.",
			"//",
			"// Parameters:",
			"//   $2:",
			"//     $3.",
			"//",
			"//   genericParameterCount:",
			"//     $4",
			"//",
			"//   types:",
			"//     $5",
			"//",
			"// Returns:",
			"//     $6",
			"//",    
			"// Exceptions:",
			"//   T:System.ArgumentNullException:",
			"//     .",
			"//",
			"//   T:System.ArgumentException:"
		],
		"description": "generate console write"
	}
}